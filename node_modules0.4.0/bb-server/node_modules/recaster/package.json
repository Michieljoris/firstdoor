{
  "name": "recaster",
  "description": "Clone this project to scaffold a new (npm/node) project.",
  "version": "0.2.0",
  "homepage": "https://github.com/michieljoris/recaster",
  "keywords": [
    "transform",
    "package",
    "recast",
    "minify",
    "transpile",
    "compress",
    "gzip"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/michieljoris/recaster.git"
  },
  "author": {
    "name": "Michiel van Oosten",
    "email": "mail@axion5.net",
    "url": "http://blog.axion5.net/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/michieljoris/recaster/blob/master/LICENSE.txt"
    }
  ],
  "main": "lib/recaster.js",
  "engines": {
    "node": ">= 0.6.x"
  },
  "dependencies": {
    "dougs_vow": "*",
    "extend": "*",
    "less": "*",
    "stylus": "*",
    "jade": "*",
    "marked": "*",
    "coffee-script": "*",
    "coffeescript-compiler": "*",
    "uglify-js": "*",
    "html-minifier": "*",
    "csso": "*",
    "clean-css": "*",
    "sweet.js": "*",
    "regenerator": "*",
    "node-typescript": "*"
  },
  "devDependencies": {
    "fs-extra": "0.8.1",
    "doccoh": "0.4.1"
  },
  "private": false,
  "scripts": {
    "dist": "node dist; node_modules/.bin/doccoh src/package.js"
  },
  "readme": "recaster\n----------\n\nTransform files in various formats to the formats a browser can\nunderstand: html, js and css, and then minify and compress it for\ntransmission to the client.\n\n\t npm install recaster\n\t var recast = require('recaster').init({\n\t\ttranspile: ['jade', 'less', 'stylus', 'sweetjs', 'typescript', \n\t\t\t\t\t'coffeescript', 'markdown', 'regenerators'],\n\t\tminify: ['js', 'css', 'html'],\n\t\tcompress: true,\n\t\tmarkdown: \n\t\t { gfm: true,\n\t\t   tables: true,\n\t\t   breaks: false,\n\t\t   pedantic: false,\n\t\t   sanitize: true,\n\t\t   smartLists: true,\n\t\t   langPrefix: 'language-'},\n\t\tverbose: true }\n     });\n\n    recast({ srcPath: somePath, destPath: somePath2, \n\t         srcData: 'bla', type: 'html', encoding: 'gzip'}).when(\n\t\tfunction(data) {\n\t\t   //data= { destData: 'xxx', type: 'html', encoding: 'gzip'}\n\t\t},\n\t\tfunction(error) {\n\t\t   //deal with error\n\t\t}\n    });\n\t\nThe various formats are transpiled to the corresponding html, css and\njs formats. If 'regenerators' is added to transpile, any es6 generators\nin (transpiled) javascript get converted to working es5 script.\n\nOptions for the individual converters can be added as objects under\ntheir own name. Markdown is included as an example above.\n\nThe function returns a promise of the recast source. See example\nabove for format of the returned data object.\n\nIf srcData and type is passed in, this data is being used instead of\nreading a file from disk.\n\nIf reading the file from disk fails, the promise fails.\n\nIf a file is not transpilable (no type or there is no transform\nfunction defined fot the particular type) the original data gets\nreturned, after possibly being zipped, keeping the promise.\n\nif there's an error transpiling, the promise breaks.\n\nIf there's an error minifying, this step gets skipped. \n\nif there's an error compressing, the promise is broken, however still\nreturning the source data. The encoding property of the returned\nobject will be undefined.\n\nIf 'destPath' is passed as a parameter the recast source code gets\nwritten to it when the promise is fullfilled, this feature is\ntemporarily disabled however.\n\nThe source is easily expanded and/or modified to include more\ntranspilers or to change the libraries that do the work.\n\nYou can use this module to transpile for node, however coffeescript\nand sweetjs can be required directly. I imagine you can set this up for\nthe other transpilers as well.\n\nTODO:\n\n* pass source maps from transpilers to minifiers\n* add default options for all transformers\n* add more transformers (clojurescript, sass, lispyscript, sibilant,\n   dart, parenscript, wisp )\n* use streaming when possible?\n* use more standard Q instead of Crockford's vow.js\n* make a distiction between libs that run on node and that are\n  dependant on some native executable\n* incorporate image processing/optimizing? \n* write docs using doccoh\n* add a commandline version\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/michieljoris/recaster/issues"
  },
  "_id": "recaster@0.2.0",
  "_from": "recaster@*"
}
