{
  "name": "sweet.js",
  "description": "Hygienic Macros for JavaScript",
  "main": "lib/sweet.js",
  "version": "0.2.5",
  "engines": {
    "node": ">=0.4.0"
  },
  "author": {
    "name": "Tim Disney"
  },
  "licenses": [
    {
      "type": "BSD",
      "url": "http://github.com/mozilla/sweet.js/master/LICENSE.BSD"
    }
  ],
  "scripts": {
    "test": "node build"
  },
  "directories": {
    "test": "test"
  },
  "bin": {
    "sjs": "bin/sjs"
  },
  "dependencies": {
    "expect.js": "~0.1.2",
    "optimist": "~0.3.4",
    "underscore": "~1.3.3",
    "escodegen": "0.0.27",
    "es6-collections": "0.2.x"
  },
  "devDependencies": {
    "mocha": "~1.3.2",
    "expect.js": "0.1.x",
    "shelljs": "0.1.x",
    "benchmark": "1.0.x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/mozilla/sweet.js.git"
  },
  "keywords": [
    "macros",
    "javascript"
  ],
  "license": "BSD",
  "readme": "sweet.js\n========\n\nHygienic Macros for JavaScript!\n\n* Documentation at [sweetjs.org](http://sweetjs.org).\n* Online [editor](http://sweetjs.org/browser/editor.html)\n* Overview and motivation in this [talk](https://air.mozilla.org/sweetjs/).\n* Example macros on the [wiki](https://github.com/mozilla/sweet.js/wiki/Example-macros). \n* [Mailing list](https://groups.google.com/forum/#!forum/sweetjs) for discussion\n* IRC channel #sweet.js on irc.mozilla.org\n\n## Use\n\n### Using Node\n\nInstall with npm:\n\n    $ npm install -g sweet.js\n\nTo try it out make a file `test_macros.sjs`:\n\n```js\n// functions can now be spelled def!\nmacro def {\n  rule { $name $params $body } => {\n    function $name $params $body\n  }\n}\ndef add (a, b) {\n  return a + b;\n}\n\nconsole.log( add(3, 7) );\n```\n\nAnd compile it with `sjs`:\n\n    $ sjs -o output.js test_macros.sjs\n    $ node output.js\n    10\n\nAlternately you can require an sjs file from node. For example, in `main.js` add:\n\n    var sjs = require('sweet.js'),\n        example = require('./example');\n    \n    example.one;\n\nWhere ./example.sjs contains:\n\n    macro A {\n        case ($a + $b) => {\n\t        $a\n\t    }\n    }\n\n    exports.one = A(1 + 2);\n\nAnd just run `main.js` in node.\n\n### Using AMD in the browser\n\nAn AMD loader is provided at [require-sweet](https://github.com/iammerrick/require-sweet).\n\n    define(['sweeten!a/javascript/dep-with-macros'], function(dep) {\n      // dep is compiled to JS at this point.\n    });\n\n## Hacking\n\nInstall the dev dependencies:\n\n    $ npm install\n\nBuild and run the tests:\n\n    $ node build\n    \nSweet.js is self hosted so the files in `src/` are compiled with the files in `lib/` and then copied into `build/lib/`. Then the tests in `test/` are compiled with `build/lib/`. Once you are happy with your changes run `node build build_sweetjs` to compile sweet.js into `lib/` which can then be checked into git.\n\nSlightly confusing but the process goes like this:\n\n    <hack hack hack>\n    $ node build\n    <tests fail!>\n    <hack hack hack>\n    $ node build\n    <tests pass!>\n    $ node build build_sweetjs\n    $ git add lib/\n    $ git commit -m \"sweet!\"\n    \n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mozilla/sweet.js/issues"
  },
  "_id": "sweet.js@0.2.5",
  "_from": "sweet.js@*"
}
