{
  "name": "bb-server",
  "description": "A bare bones http server",
  "version": "0.4.0",
  "homepage": "https://github.com/michieljoris/bb-server",
  "keywords": [
    "server"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/michieljoris/bb-server.git"
  },
  "author": {
    "name": "Michiel van Oosten",
    "email": "mail@axion5.net",
    "url": "http://blog.axion5.net/"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "http://github.com/michieljoris/url_washer/blob/master/LICENSE.txt"
    }
  ],
  "main": "lib/bb-server",
  "engines": {
    "node": ">= 0.10.x"
  },
  "dependencies": {
    "websocket": "1.0.x",
    "nodemailer": "0.5.x",
    "colors": "*",
    "optimist": "0.2.x",
    "portfinder": "~0.2.1",
    "forever-monitor": "1.2.x",
    "mime": "1.2.x",
    "mysql": "0.9.6",
    "bytes": "*",
    "fs-extra": "*",
    "escape-html": "1.0.x",
    "MD5": "*",
    "extend": "*",
    "recaster": "*",
    "cachejs": "*",
    "url_washer": "*",
    "dougs_vow": "*"
  },
  "devDependencies": {
    "fs-extra": "0.3.x",
    "doccoh": "0.4.1"
  },
  "private": false,
  "scripts": {
    "start": "./bin/bb-server"
  },
  "bin": {
    "bb-server": "./bin/bb-server"
  },
  "readme": "bb-server\n===========\n\nStatus: still testing features and getting rid of little bugs.\n\nBasic server, configurable by setting commandline options or by\nrequiring it. The options can then be passed to the server as an\nobject.\n\nIt's basically a static assets server however over time I've\nrewritten it a couple of times and added some more features. \n\nI am aiming for simplicity. The server can be started without any\noptions and will serve up its working directory. Any features required\ncan be turned on by setting options. The whole app is around 2000\nlines including comments, the main logic for serving files less than\n400.\n\nSome features:\n\n* Caching of all static resources, in memory (LRU) and on disk.\n\n* Transpiling, minifying and compressing of these assets on the fly,\ncombine this with caching and only modified assets will be transformed\non a request.\n\n* Prerendering based on fragment, hashbangs and bot requests. These are\nalso cached then.\n\n* Serves a single page application\n\n* Start a websocket and/or a https server alongside your http server\n\n* Support for sessions\n\n* You can plugin your own GET and POST handlers triggered by route.\n\n* Deals with favicon.ico requests\n\n* Customized logging of all requests to a log file\n\n* Cache busting by automatically removing stamps\n\nYou can also use npm however that might not be the latest version.\n\nTo install clone it, cd into the directory and do:\n \n\tnpm install\n\nThen ./bin/bb-server to run it.\n\nOr do:\n\n\tnpm install -g bb-server\n\t\nThen bb-server to run.\n\nYou can also install it directly from npm:\n\n\tnpm install bb-server\n\t\n\t  \nExecute bb-server -h for a list of command line options.\n\t\t  \nSee the example_server.js file for an example of requiring the server\nin your own module and documentation for most of the options. \n\n\nTODO:\n* optimize images on the fly\n* api/ui for viewing/retrieving server logs and status\n* rewrite async logic using generators and promises\n* make sure to send 404's when prerendering generates a 404 page\n* bots are regexed, however you could consult a database (\n  https://github.com/GUI/uas-parser) and or even idenity googlebot by\n  ip\n* security\n* send cors headers?\n* add auth support (sign in with google, github etc)\n* unify log messages into one system\n* serve fancy dir\n* send script to refresh browser from emacs, or on save etc\n\nIdeas:\n* send diffs of files?\n* share js files between server and client\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/michieljoris/bb-server/issues"
  },
  "_id": "bb-server@0.4.0",
  "_from": "bb-server@0.4.*"
}
